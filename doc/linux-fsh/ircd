#! /bin/sh
# Copyright (c)2000-2003 TR-IRCD Development
# 
# This script is a modified version of the skeleton script provided
# with SuSE Linux Version 8.1
# The Credits to the original skeleton script:
#
# Copyright (c) 1995-2002 SuSE Linux AG, Nuernberg, Germany.
# All rights reserved.
#
# Author: Kurt Garloff <feedback@suse.de>
#
# init.d/ircd
#
### BEGIN INIT INFO
# Provides:       ircd
# Required-Start: $network $named $remote_fs $netdaemons $syslog
# Required-Stop:
# Default-Start:  3 5
# Default-Stop:
# Description:    Start tr-ircd IRC Daemon
### END INIT INFO

. /etc/rc.config
. /etc/sysconfig/trircd

# Determine the base and follow a runlevel link name.
base=${0##*/}
link=${base#*[SK][0-9][0-9]}

# Force execution if not called by a runlevel directory.
test $link = $base && START_TRIRCD=yes
test "$START_TRIRCD" = yes || exit 0

test -x /usr/sbin/ircd || exit 5

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     ditto but be verbose in local rc status
#      rc_status -v -r  ditto and clear the local rc status
#      rc_failed        set local and overall rc status to failed
#      rc_reset         clear local rc status (overall remains)
#      rc_exit          exit appropriate to overall rc status
. /etc/rc.status

# First reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0 - success
# 1 - misc error
# 2 - invalid or excess args
# 3 - unimplemented feature (e.g. reload)
# 4 - insufficient privilege
# 5 - program not installed
# 6 - program not configured
# 7 - program is not running
# 
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signalling is not supported) are
# considered a success.

case "$1" in
    start)
        if ! test -f /etc/ircd/ircd.conf ; then
	    echo "Could not find the server config file, aborting"
	    rc_status -v
        fi
	echo -n "Starting TR-IRCD irc daemon:"
        ## Start daemon with startproc(8). If this fails
        ## the echo return value is set appropriate.

        if [ ! -f /var/ircd/ircd.pid ]; then
           startproc -f /usr/sbin/ircd $TRIRCD_PARAMETRES
        elif ! ps -h --pid `cat /var/ircd/ircd.pid` | grep "/usr/sbin/ircd" 2>&1 >/dev/null; then
           rm -f /var/ircd/ircd.pid
           startproc -f /usr/sbin/ircd $TRIRCD_PARAMETRES
        else
           startproc /usr/sbin/ircd $TRIRCD_PARAMETRES
        fi

        # Remember status and be verbose
        rc_status -v
	;;
    stop)
	echo -n "Shutting down TR-IRCD irc daemon:"
        ## Stop daemon with killproc(8) and if this fails
        ## set echo the echo return value.

        killproc -p /var/ircd/ircd.pid -TERM /usr/sbin/ircd

        # Remember status and be verbose
        rc_status -v
	;;
    try-restart)
        ## Stop the service and if this succeeds (i.e. the 
        ## service was running before), start it again.
        $0 status >/dev/null &&  $0 restart

        # Remember status and be quiet
        rc_status
        ;;
    restart)
        ## Stop the service and regardless of whether it was
        ## running or not, start it again.
        $0 stop
        $0 start

        # Remember status and be quiet
        rc_status
        ;;
    reload)
        ## Like force-reload, but if daemon does not support
        ## signalling, do nothing (!)

        # If it supports signalling:
        echo -n "Reload service ircd"
        killproc -p /var/ircd/ircd.pid -HUP /usr/sbin/ircd
        rc_status -v
        
        # If it does not support reload:
        #exit 3
        ;;
    status)
        echo -n "Checking for service ircd: "
        ## Check status with checkproc(8), if process is running
        ## checkproc will return with exit status 0.

        # Status has a slightly different for the status command:
        # 0 - service running
        # 1 - service dead, but /var/run/  pid  file exists
        # 2 - service dead, but /var/lock/ lock file exists
        # 3 - service not running

        # NOTE: checkproc returns LSB compliant status values.
        checkproc /usr/sbin/ircd
        rc_status -v
        ;;
    probe)
        test /etc/ircd/ircd.conf -nt /var/ircd/ircd.pid && echo reload
        ;;
    *)
        echo "Usage: $0 {start|stop|status|try-restart|restart|reload|probe}"
        exit 1
esac
rc_exit
